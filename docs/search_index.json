[["index.html", "An introduction to markdown basics Chapter 1 Prerequisites 1.1 Opening a markdown file 1.2 Installing packages 1.3 Loading Libraries", " An introduction to markdown basics The A Team :) 2021-06-11 Chapter 1 Prerequisites You have installed R (https://www.r-project.org/) You have installed RStudio (https://www.rstudio.com/products/rstudio/download/) 1.1 Opening a markdown file Launch your r/studio app. Your rstudio workspace should look more or less similar to this: If your rstudio opens up with 4 windows instead of 3, skip next step. 2. From the main menu, go to File-&gt;&gt;New File-&gt;&gt;R Markdown. You shoukd have a window like this: Fill in the details for your document title and author. Leave the rest as default. Click Ok This opens up your 4th rstudio window with an rmarkdown script. Now your app area should look more or less like this; The arrangement may however be different. If so, do not worry, its just semantics. As you might have seen, you may open other scripts such as R, python, SQL etc in similar manner. 1.1.1 Rstudio windows explained: The Source This is your scripting area. You may write, edit and run your code from here. The Console All processing in r happens here. You may this is the r kitchen. When you run your code, this is where it is evaluated. You may also use the console to write and execute your code. However, you can not save your code, nor can you edit it (you will have to rewrite it). Thus, it is always advisable to write your code in the script/source area. The Environment This panel holds your data objects and their metadata. As you create or add new objects into your project, they will appear in this window. You may view and remove objects. It also contains the History tab from which you may view all your r processing history. The Files/Plots/Packages/Help Panel This panel provides a shortcut/alternative to different functions such as to access your project files, to view plots from your code evaluations, install packages and access the Help resource. You may add/remove items here but we will learn that much later. For now we leave it as is. 1.2 Installing packages Options: From the console; After the greater than (&gt;) sign, write command install.packages(\"package name\") and hit enter on your keyboard. See example; In script window Inside your script write command install.packages(\"package name\") Click on Run (Run button is on the top right of your source panel). Alternatively, if your write your command in a code chunk, you may hit the Play button on far right of your code chunk. See example; We see more about code chunks in the next chapter. 3. From the menu bar From the menu bar, go the the tab Tools and select Install Packages. You should see a window like this one In the Install from field, select Repository (CRAN), then enter the name(s) of packages to be installed. Leave everything else as default. Click Install. 4. From Files/Plots/Packages/Help Panel Click on the Packages tab. There are 2 tabs under this, Install &amp; Update. Click on Install. If the Install from is not set to Repository (CRAN), set it so, and enter name(s) of packages to be installed. Leave everything else as default. Click Install. Note: Packages can only be installed once. To mean, if you close your r/rstudio app and come back to it the next day/session, you do not need to install the packages you already installed in your previous session. You will only need to load their libraries (see next section) 1.3 Loading Libraries To be able to make use of the packages installed, you need to call their libraries. Most libraries take the name of the package. For instance, for the package rmakdown, the respective library is rmarkdown.To call the rmarkdown library, use command library(rmarkdown). So in general to load/call libraries use command library(name of library). You may load libraries in the console or in your script. Note: Unlike packages,library functions expire when you close a project or end a session. Therefore, each time you open an r session, you have to load/call relevant libraries "],["getting-started.html", "Chapter 2 Getting started 2.1 About rmarkdown 2.2 Editing in markdown", " Chapter 2 Getting started 2.1 About rmarkdown R markdown is a file document that allows you to write, save and execute code, as well as text and figures to help generate reproducible reports that can be shared in several formats. The file extension is .rmd. A markdown file has three main sections; YAML header This is where your document metadata go to e.g your document title, author, date, output file type etc. This parameters are set when opening a new .rmd file. And more can be set after. This section MUST always be at the beginning of your document and between a set of three dashes i.e three dashes before section and three dashes after section. Text Your narration/prose in markdown format. More details about formatting in subsequent sections. Code chunk(s) They start with ```{r} and end with ``` 2.2 Editing in markdown 2.2.1 Headers To create headers for your reports/document e.g. chapters, sub-chapters and so on; use the hash sign # in front of the title. Sequentially increase the number of \"# signs to denote subsequent header levels. Insert blank line before each header (except in the beginning of document). # Header level 1 ## Header level 2 ### Header level 3 #### Header level 4 Note: For the purpose of this example, I have added a space before each line so that r doesnt create the headers. Remove the space to create the headers 2.2.2 Bold and italic text To create emphasis in your markdown texts, use an asterisk before and after text to italicize or double asterisk to make your text bold. Alternatively, you may use single underscore for italics or double underscore for bold. 2.2.3 Create Lists 2.2.3.1 Ordered list Use numbers to order your list items. and a plus sign + to create sub-items on your list. List item 1 List item 2 Sub-item 1 Sub-item 2 Sub-item 3 List item 3 2.2.3.2 Unordered list Use an asterisk * before list item to create an unordered list. Use a plus + sign for sub-items. Use tab command or two spaces on your keyboard to indent the list items List item List item Sub-item Sub-item Sub-sub item List item 2.2.4 Manual line breaks Use two or more spaces at the end of a line to insert a line break 2.2.5 Insert links You may insert a link using the plain http address such as https://rmarkdown.rstudio.com/ or insert it as a linked phrase using square brackets and parenthesis such as our link phrase goes here. 2.2.6 Insert figures/images To insert images to our document, we use the same syntax as links, but start with an exclamation mark! before syntax. For an image from a url use; ![text to accompany your image e.g a caption](your https link) or for an image file in your local directory use, [your image text](path to local image file). For instance, I downloaded the UN Climate logo and saved it as a .jpg in my working directory as exact name unfccc_logo.jpg The following syntax will insert the logo into my document: ![UN Climate logo](unfccc_logo.jpg). However, this draws the logo on entire page width. Therefore to specify the drawing width of the image to x inches, we add the the command {width=xin}` at the end. When inserting images from local file, it is strongly recommended to have the file in your working directory. 2.2.7 Insert block quotes To insert a block quote within your text, use the greater than sign &gt; in the beginning of quote. The quote must begin on a new line, and remember to insert blank line before and after. For instance; This exercise may seem complicated at first, but trust me, it is not. You will agree with me sooner than later :) 2.2.8 Insert code chunks To write your code use open code chunk with three backticks and the curly brackets {insert your code language}, hit enter on your keyboard, insert your code and hit enter, close the code chunk with another three backticks. For code in r language; # your code here For code in python; # your code here 2.2.9 Create tables 2.2.9.1 Option 1 Create table headers with dashed lines below the header title. Separate headers with tab or space between the headers and corresponding dashed lines. Type in row values below the dashed lines. The row value length may exceed the dashed line length but MUST not extend into the next headers dashed line. Column alignment is based on the position of the header/column title relative to the dashed line below it. To insert a caption or alt text to your table use, full colon : followed by your caption text at the end of the table. Alternatively, use Table: your caption or text. you may insert table caption here Table: Alternative caption option Header 1 Header 2 Header 3 Header 4 12343 895 0.5867891011 1 Name Rank score remark Type 3 TRUE 12.1 Left align Right align Center Default 2.2.9.2 Option 2 You may also create simple tables using a knitr function called kable. The code below tells r that we want to create a data set with 3 columns, X, Y &amp; Z, assigning them the values enclosed in the letter c. The letter c used together with brackets indicates a list of elements. Thus, in the example below, we tell r that our column X, will contain a list of 4 elements i.e 20, 30, 10 &amp; 50. Then we tell r to create the data set by combining all the columns X, Y &amp; Z into a data frame. Finally, we call the function kable and enter the data we created. This function converts or data frame into a table format. Optionally, you may add a caption to the table and specify cell alignment. X&lt;-c(20,30,10, 50) # create variable X Y&lt;-c(1.4, 4.3,5.9,2.7) # create variable Y Z&lt;-c(&quot;yes&quot;,&quot;no&quot;,&quot;true&quot;,&quot;false&quot;) # create variable Z mydata&lt;-data.frame(X,Y,Z) # combine variables into table format knitr::kable(mydata, caption = &quot;My first simple table with kable&quot;, align = &#39;c&#39;) # plot table with kable Table 2.1: My first simple table with kable X Y Z 20 1.4 yes 30 4.3 no 10 5.9 true 50 2.7 false Note that our code chunk is labelled kable. You can label code chunks as in the brackets below (open chunk ```{r your chunk name} your code close code chunk with ```) This will be useful for cross-referencing. 2.2.10 Page breaks Use three or more asterisks or dashes to insert a page break. Remember to add a blank line before the asterisks or dashes 2.2.11 Process a markdown document to desired output To create the desired output file document from the markdown format, use the function render (\"your .rmd file name). Alternatively,and most commonly used, is the Knit button from the markdown script environment. The button is a blue ball of yarn around a crotchet, and is labeled Knit When a document is rendered, rmarkdown saves the results/output file into your working directory, giving it the same name as your .rmd file, but with relevant extension (e.g. as html if output type was set to html) 2.2.12 References 2.2.12.1 Citations/Bibliography To add citations to our document, we need to add our reference document details to a text file saved in the .bib format e.g myrefences.bib. We also need to add this file to our bibliography parameter in the yaml section of the index.rmd file. The references for this exercise are saved in the file book.bib. To add your reference documents to the .bib file, use the BibTeX citation style i.e (documentype?){documentname, title={document title}, author={author name(s)}, year={publication year}, publisher={publisher name}, url={document url} } Sites such as Google Scholar have ready to use/ formatted bibliography styles such as BibTeX, EndNote etc. You may copy-paste the BibTeX text into your .bib file in r. You may have as many documents listed in the .bib file but rmarkdown will only include those that have been referenced within your markdown document. To reference documents in your narrative and thus, have them included in the reference section, use the format [@documentname]. For instance, (Xie 2015) and (Team and others 2013) are the only references in my book.bib file. The references will appear at the end of the chapter where they are referenced, as well as in the overall References section. 2.2.12.2 Chapter References To reference chapter, type in the chapter title inside square brackets. For instance, this command references our first chapter Prerequisites. The same applies to section headers. Just type [section header name] e.g Page breaks. 2.2.12.3 Table &amp; Figure References To reference figures use syntax @ref(fig:code chunk label) or @ref(tab:code chunk label) for tables. For instance, we created our kable table in the code chunk named kable. To reference this table anywhere in our document, just type in command 2.1. This will insert a reference link to table 2.1. 2.2.13 Pandoc &amp; Knitr Pandoc is a universal document converter designed to convert thousands of markup languages. So when we create our document in markdown and want to output it as a pdf, pandoc does the work. Knitr on the other hand, is an r package that enables the integration of yaml, text and code evaluations into an output document. Knitr contains the Knit function through which we render our rmarkdown documents to our desired output format. When you render a document in rmarkdown (or call the knit function), the rmarkdown document is converted to a basic markdown language (.md) which is then converted by pandoc to say html, pdf, word, etc as per user specifications. Knitr and pandoc come in bundled with rmarkdown, and thus, there is no need to install them separately. However, should you need to install pandoc as standalone, you may do so from the Pandoc homepage. In this regard, it is important to note that in as much as standalone installations may provide much higher versions of the software than what is already bundled in r, they are often not streamlined for use in r, and may thus cause some compatibility issues. References "],["bookdown.html", "Chapter 3 Bookdown 3.1 Setting up an Open NAP document 3.2 Some Troubleshooting", " Chapter 3 Bookdown 3.1 Setting up an Open NAP document We will use the package bookdown to generate NAP document in a book format. Journal articles or reports can be produced in the same way. We will also use the package tinytex to build pdf format of the book document. First, launch the rstudio app in your pc. Install the bookdown and tinytex packages. Use any of the methods shown in the Installing packages section. Then from the menu bar go to File&gt;-&gt;New Project-&gt;&gt;New Directory-&gt;&gt;Book Project using bookdown. A new window appears Give your bookdown directory a name NAPBook_tutorial. This is the name of a new folder that will be created to store your bookdwon project files. In the Create project as subdirectory of field, use the browse button to navigate to where you want to save your bookdown project folder. After you select the directory location, you are returned to the Create Book project window. Click create project. A new project session opens up, with skeleton chapters and other sections and metadata files. Your project window might appear with panel arrangements different from mine/in screenshot. Your project files can be accessed from the Files tab in bottom right of the project window. Each chapter is compiled from a single .rmd file, and always starts with a first level header sign #. From the files pane, you can open any chapter, and edit it to your liking. Lets take a look at the _bookdown.yml file. From the Files tab, click on the _bookdown.yml file. The file open up in your script/source pane. Notice, the book_filename takes the name of the folder we created when opening the project. Lets add the line output_dir: \"docs\" to this file. See screenshot below; This command creates an additional folder called docs and specifies that we want to store our outputs here. This folder is necessary for creating webpages from our book project. 9. Save changes. Use the Save icon on the script window or Ctrl + S on your keyboard. 10. Next, click to open the _output.yml file. 11. Lets edit the line that contains the title to our book. Change the text A Minimal Book  to NAP Book Tutorial. Should look like this; Ignore everything else for now :) 12. Save. 13. Scroll down your files to find the index.rmd file. Click to open. 14. Edit the title, author &amp; description fields in the yaml header section. 15. Delete all text, except the last code chunk. 16. Add a chapter named Preliminaries before the code chunk. Chapters are created using the first level header #. 17. Add sections to your chapter using second level header ##. Your script shoud look more or less similar to this; Next, open the README.md file and edit the text to this This is an example NAP designed to help you get started with creating your NAPs with bookdown. Or add a description of your choice. Save your work. Open the 01-Intro.rmd file. Type in the chapter title Introduction Type in sub-chapters with the names Overview of the NAP Process, NAP Vision, NAP Mandate, NAP Process in Sierra Leone, Functions, Guiding Principles, Goals, Overview of the NAP Your script should resemble this; This text has been borrowed from the Sierra Leone NAP. Use the text from the screenshot below to edit the next two chapters (.rmd files). i.e 02-literature.rmd &amp; 03-methods.rmd. For the interest of time, lets delete chapters 4 and 5 from our project files. 23. From the files tab (bottom right), click on the check-boxes to the left of the application and summary .rmd files to select them. 24. Click delete Save project. From the Environment window, click on the tab Build. On the new window that opens, click the hammer/Build Book button to start rendering the book. This process may take a few minutes. You can monitor the progress in the Environment window. When the process is done, your book should open up in an html window as below; Your book Scroll down your chapters to find the References chapter. Oops! No reference! Dont sweat. Back to our project, from the Files tab in bottom right window, open the file named book.bib. This is the text file holding our citations.Currently, only one. You will notice that the document type is a book, and the the book name is xie2015. Adding bibliography To cite this book in our NAP book, open square brackets and type the @ sign followed by the book name. i.e (Xie 2015). Lets use this citation say in the Introduction chapter. Open the chapter, and insert the text Our only citation at the moment is (Xie 2015). See example: cite book Run the Build Book command again. Now you should see that your book has been added to the References section, both in the chapter in which you cited it as well as in the overall References Chapter. citation added to ref Congratulations!!! 3.1.1 Some things to note To create additional chapters, create a new /empty .rmd file and save it under your bookdown directory. Use the same numbering structure as the default chapters (i.e. 01,02,03, etc). We will learn about advanced numbering and re-ordering chapters later. Use the knit function to render and preview a single chapter. From our output.yml file, you will notice that we have 3 output options for our file; gitbook, pdf and epub. This is the default. You may select the most preferred output type by deleting the other/unwanted formats or leave this as default and choose a single output format when building the book. Since we left the default 3 options, when we rendered the book, it was compiled in .tex/gitbook, pdf and epub. This can be accessed from the docs folder. Outputs 4 When building the book. Here you may choose to build one or all formats. From the Build Book button, click on the drop-down arrow and select your preferred format. Build book format options 3.2 Some Troubleshooting Creating pdf documents using LaTeX engines and distributions such as TinyTeX is not a straightforward task and may produce errors as the process involves multiple processing activities. However, most errors can be solved using suggestions contained in the error messages produced in the Environment or Console windows. If, in any case, the LaTeX error generated is not clear, you may use any the commands options below to solve the problem. Remove the # sign to run code # remotes::install_github(&#39;yihui/tinytex&#39;) ## 1 install the development version of tinytex # update.packages(ask = FALSE, checkBuilt = TRUE) #3 2 update your r and # tinytex::tlmgr_update() ## tinytex packages # tinytex::reinstall_tinytex() ## 3 reinstall tinytex # options(tinytex.verbose = TRUE) ## 4 set this option in an r code chunk.This helps provide more info on your problems. Remember to remove it after solving your problem See more on TinyTex Debugging. Additionally, quite often, LaTeX formatting is not very compatible with other output formats such as html. But with the use of html widgets and other advanced formatting options, this problem can be overcome. To produce a pdf document from a document with both LaTeX and html formats, it may be useful to install the package webshot from CRAN. # install.packages(&quot;webshot&quot;) # webshot::install_phantomjs() Further reading on html widgets here References "],["github-github-pages.html", "Chapter 4 GitHub &amp; GitHub Pages 4.1 Sharing on GitHub 4.2 Publishing to GitHub pages", " Chapter 4 GitHub &amp; GitHub Pages 4.1 Sharing on GitHub Github is great for project collaboration, backup and version control. To use github as your repository manager; Create an account at (https://github.com/). Create a repository for your files. Click on the plus sign + located at the top right corner of your github account page. Click on New Repository from the drop-down menu. On the new window that appears, give the repository a name: NAPBook_Tutorial Leave the repository as Public Leave everything else as is Scroll down and click on Create Repository On the resulting window, click on upload an existing file This will take you to a new window, from which you can drag-&amp;-drop or browse to your files. 9. Click on choose your files. 10. Navigate with the file explorer to where we saved our NAPBook_tutorial folder in your pc. 11. Select everything within this folder, and click Open. Your files will start loading. Give it a minute or so. If you scroll through the files you will notice that our docs folder is missing. Do not worry! 12. To add the folder, lets use the drag and drop method. From your file explorer, navigate to our NAPBook_tutorial folder, and click once on the docs folder to select it. 13. Drag and drop this folder into your github repository. The files should start uploading. 14.. After your files finish uploading, scroll down to the Commit changes field; here you may enter a short description for your files. Lets enter the text our first NAP book commit When making changes to your files, you may use this field to briefly describe what changes you made, otherwise commonly known as commits. 6. Next, hit the Commit changes button at the end. This is called commiting. Congratulation once again! To share your repository with colleagues and friends, just copy the link on your browser and share it with them. The link should take a similar identity as below; https://github.com/yourusername/NAPBook_Tutorial 4.2 Publishing to GitHub pages Github pages helps you to create/publish websites in very simple steps. We will publish the NAP book we just created with bookdown into a git-based website. To do this, From the github repository you created in last step, click on the Settings tab (right side of your screen) Scroll down the listed menu items on the left side of the screen until you find menu item Pages. Click on it. Scroll down to the Source field. Click on the drop-down arrow and select the main branch and docs folder as your source files for your website. Click Save. Next, on the Theme Chooser field, click to choose a theme for your website. A page similar to this appears. You may scroll through to see the options. For this case, lets select the first theme Cayman. Once a theme is selected, a message with a link to your website appears just above your Source field. Your site is ready to be published at https://yourusername.github.io/repositoryname/ or as seen here Use this link to view your newly created website. Alternatively, navigate back to your main repository area, scroll down to your right to find your active github-pages. Click to view your website deployments. gh pages deployment Now give yourself a pat on the back! "],["suggested-reads.html", "Chapter 5 Suggested Reads", " Chapter 5 Suggested Reads Here we include a list of links to articles and other material that might be useful to your journey R mardown basics Bookdown basics GitHub for bookdown "],["references-1.html", "References", " References "]]
